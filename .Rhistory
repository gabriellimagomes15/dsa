json <- jsonlite::toJSON(reviews_2)
write(json, 'C:/Users/gabri/Desktop/vanHack/data/review.json')
as.Date(reviews_2$date)
reviews_2$date
dmy(reviews_2$date)
reviews_2$dateFull <- dmy(reviews_2$date)
View(reviews_2)
json <- jsonlite::toJSON(reviews_2)
write(json, 'C:/Users/gabri/Desktop/vanHack/data/review.json')
table(reviews_2$recomends)
reviews_2[ reviews_2$recomends == 'No opinior of CEO','recomends']
reviews_2[ reviews_2$recomends == 'No opinion of CEO','recomends']
reviews_2[ reviews_2$recomends == 'No opinion of CEO','recomends'] <- "Doesn't Recommend"
json <- jsonlite::toJSON(reviews_2)
write(json, 'C:/Users/gabri/Desktop/vanHack/data/review.json')
install.packages('e1071')
install.packages('forecast')
install.packages('forecast')
install.packages('forecast', dependencies = TRUE)
install.packages('e1071')
q()
q(install.packages('forecast', dependencies = TRUE)
install.packages('forecast', dependencies = TRUE)
?ts()
library(forecast)
?auto.arima()
?forecast()
x <-
?dist()
x <-
?dist()
?dist()
m <- matrix()
m[1,1] <- 0
m[2, ] <- c(2,0)
m[2,1] <- c(2)
m
m <- matrix()
m <- matrix(nrow = 5, ncol = 5)
m
m[1, ] <- 0
m[2,] <- c(2,0)
m[2,1:2] <- c(2,0)
m
m[3,1:3] <- c(6,5,0)
m
m[4,1:4] <- c(10,9,4,0)
m
m[5,1:5] <- c(9,8,5,3,0)
m
m[1,1] <- 0
m
m[1,2:5] <- NA
m
dist(m)
fit <- dist(m,  method = "euclidean")
plot(fit)
d <- dist(m,  method = "euclidean")
fit <- hclust(d, method="ward")
plot(fit)
dados <- data.frame(a = c(1,1,2,2,5,6,5), b = c(1,2,1,2,1,1,2) )
dados
?kmeans(dados, centers = 2, iter.max = 5,nstart = )
kmeans(dados, centers = 2, iter.max = 5,nstart = c(3,0))
k <- kmeans(dados, centers = 2, iter.max = 5,nstart = c(3,0))
k$centers
k$cluster
k$iter
print(k)
k$centers
k <- kmeans(dados, centers = 2, iter.max = 5,nstart = c(5,0))
k$centers
g1 <- sample(1:2, size=10, replace=TRUE)
g2 <- sample(1:3, size=10, replace=TRUE)
rand.index(g1, g2)
install.packages('fossil')
library(fossil)
g1 <- sample(1:2, size=10, replace=TRUE)
g2 <- sample(1:3, size=10, replace=TRUE)
rand.index(g1, g2)
g1
g1 <- c(1,2,4,5) ##sample(1:2, size=10, replace=TRUE)
g2 <- c(2,6,7) ##sample(1:3, size=10, replace=TRUE)
rand.index(g1, g2)
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv')
View(csv)
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv', sep = ',', header = T)
View(dados)
View(dados)
View(csv)
table(csv$Aparencia)
View(csv)
table(csv$Aparencia)
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv', sep = ',', header = T)
table(csv$Aparencia)
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv', sep = ',', header = T, stringsAsFactors = F)
table(csv$Aparencia)
table(csv$Temperatura)
library(e1071)
model <- naiveBayes(class ~, csv)
model <- naiveBayes(class ~ ., csv)
?naiveBayes(class ~ ., csv)
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv', sep = ',', header = T)
model <- naiveBayes(class ~ ., csv)
csv
as.numeric(csv$Aparencia)
csv$Aparencia <- as.numeric(csv$Aparencia)
csv$Temperatura <- as.numeric(csv$Temperatura)
csv$Umidade <- as.numeric(csv$Umidade)
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv', sep = ',', header = T)
csv$Aparencia <- as.numeric(csv$Aparencia)
csv$Temperatura <- as.numeric(csv$Temperatura)
csv$Umidade <- as.numeric(csv$Umidade)
csv$Vento <- as.numeric(csv$Vento)
csv$Classe <- as.numeric(csv$Classe)
model <- naiveBayes(class ~ ., csv)
as.matrix(csv)
model <- naiveBayes(class ~ ., as.matrix(csv) )
model
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv', sep = ',', header = T)
model <- naiveBayes(class ~ ., as.matrix(csv) )
csv$Aparencia <- as.numeric(csv$Aparencia)
csv$Temperatura <- as.numeric(csv$Temperatura)
csv$Umidade <- as.numeric(csv$Umidade)
csv$Vento <- as.numeric(csv$Vento)
csv$Classe <- as.numeric(csv$Classe)
model <- naiveBayes(class ~ ., as.matrix(csv) )
class(model)
summary(model)
print(model)
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv', sep = ',', header = T)
csv$Aparencia
as.numeric(csv$Aparencia)
csv$Temperatura
csv$Umidade
csv$Vento
as.numeric(csv$Vento)
new <- as.data.frame(a = c(2), b = 3,c=2, d=2)
new <- data.frame(a = c(2), b = 3,c=2, d=2)
new
predic <- predict(model,)
predic <- predict(model,new)
new
new <- data.frame(Aparencia = c(2), Temperatura = 3,Umidade=2, Vento=2)
predic <- predict(model,as.matrix(new))
csv$Aparencia <- as.numeric(csv$Aparencia)
csv$Temperatura <- as.numeric(csv$Temperatura)
csv$Umidade <- as.numeric(csv$Umidade)
csv$Vento <- as.numeric(csv$Vento)
csv$Classe <- as.numeric(csv$Classe)
model
predic <- predict(model,as.matrix(new), type = 'raw')
predic <- predict(model,new, type = 'raw')
View(csv)
predic <- predict(model,csv[1,-5], type = 'raw')
csv[1,-5]
model <- naiveBayes(class ~ ., csv )
model <- naiveBayes(Classe ~ ., csv )
class(model)
summary(model)
print(model)
new <- data.frame(Aparencia = c(2), Temperatura = 3,Umidade=2, Vento=2)
predic <- predict(model,csv[1,-5], type = 'raw')
predic <- predict(model,new, type = 'raw')
predic
predic <- predict(model,new)
predic
new
predic <- predict(model,new, type = 'raw')
predic
csv$Classe
csv <- read.csv2('C:/Users/gabri/Downloads/cinco.csv', sep = ',', header = T)
csv$Classe
seis <- read.csv2('C:/Users/gabri/Downloads/seis.csv', sep = ',', header = T)
seis <- read.csv2('C:/Users/gabri/Downloads/seis.csv', sep = ',', header = T)
install.packages("rpart");
library(rpart)
View(seis)
seis <- read.csv2('C:/Users/gabri/Downloads/seis.csv', sep = ';', header = T)
View(seis)
install.packages("ROCR")
library(ROCR)
train_tree = rpart(Espera~., data = seis);
train_tree
plot(train_tree);
plot(train_tree);
train_tree = rpart(Espera ~ ., data = seis);
train_tree
install.packages('party')
library(party)
tree <- ctree(Espera ~., seis)
plot(tree);
?rpart(Espera ~ ., data = seis, );
train_tree = rpart(Espera ~ ., data = seis, method="class");
tree = rpart(Espera ~ ., data = seis, method="class");
plot(tree);
forecast(Espera ~., seis)
tree <- ctree(Espera ~., seis)
plot(tree);
# Construindo um modelo
install.packages("C50")
library(C50)
tree <- C5.0(Espera ~.,seis)
plot(tree);
seis$Tipo
new <- data.frame(Sexta = c(2), Faminto = 1,Clentes=2, Tipo=3)
predict(tree, new)
new <- data.frame(Sexta,Sabado = c(2), Faminto = 1,Clentes=2, Tipo=3)
new <- data.frame(Sexta.Sabado = c(2), Faminto = 1,Clentes=2, Tipo=3)
predict(tree, new)
new <- data.frame(Sexta.Sabado = c(2), Faminto = 1,Clientes=2, Tipo=3)
predict(tree, new)
seis$Sexta.Sabado
new <- data.frame(Sexta.Sabado = 2, Faminto = 1,Clientes=2, Tipo=3)
new
tree = rpart(Espera ~ ., data = seis, method="class",);
predict(tree, new)
seis <- read.csv2('C:/Users/gabri/Downloads/seis.csv', sep = ';', header = T)
seis$Sexta.Sabado <- seis$Sexta.Sabado
seis$Faminto <- seis$Faminto
seis$Clientes <- seis$Clientes
seis$Tipo = seis$Tipo
seis$Espera = seis$Espera
tree = rpart(Espera ~ ., data = seis, method="class",);
tree = rpart(Espera ~ ., data = seis);
new <- data.frame(Sexta.Sabado = 2, Faminto = 1,Clientes=2, Tipo=3)
seis <- read.csv2('C:/Users/gabri/Downloads/seis.csv', sep = ';', header = T)
seis$Sexta.Sabado <- seis$Sexta.Sabado
seis$Sexta.Sabado <- as.numeric(seis$Sexta.Sabado)
seis$Faminto <- as.numeric(seis$Faminto)
seis$Clientes <- as.numeric(seis$Clientes)
seis$Tipo = as.numeric(seis$Tipo)
seis$Espera = as.numeric(seis$Espera)
tree = rpart(Espera ~ ., data = seis);
plot(tree);
new <- data.frame(Sexta.Sabado = 2, Faminto = 1,Clientes=2, Tipo=3)
predict(tree, new)
seis <- read.csv2('C:/Users/gabri/Downloads/seis.csv', sep = ';', header = T)
seis$Tipo
new <- data.frame(Sexta.Sabado = 2, Faminto = 1,Clientes=2, Tipo=1)
predict(tree, new)
# Instalando os pacotes
install.packages("ISLR")
install.packages("caret")
# Carregando os pacotes
library(ISLR)
library(caret)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
ctrl
knnFit <- train(Espera ~ ., data = seis, method = "knn", trControl = ctrl, preProcess = c("center","scale"))
print(knnFit)
plot(knnFit)
seis <- read.csv2('C:/Users/gabri/Downloads/seis.csv', sep = ';', header = T)
seis$Sexta.Sabado
seis$Faminto
seis$Clientes
seis$Tipo
new <- data.frame(Sexta.Sabado = 2, Faminto = 1,Clientes=1, Tipo=3)
knnPredict <- predict(knnFit, newdata = testing )
knnPredict <- predict(knnFit, newdata = new )
plot(knnPredict);
knnPredict <- predict(knnFit, newdata = new )
seis <- read.csv2('C:/Users/gabri/Downloads/seis.csv', sep = ';', header = T)
seis$Sexta.Sabado <- as.numeric(seis$Sexta.Sabado)
seis$Faminto <- as.numeric(seis$Faminto)
seis$Clientes <- as.numeric(seis$Clientes)
seis$Tipo = as.numeric(seis$Tipo)
seis$Espera = as.numeric(seis$Espera)
knnFit <- train(Espera ~ ., data = seis, method = "knn", trControl = ctrl, preProcess = c("center","scale"))
knnFit
new <- data.frame(Sexta.Sabado = 2, Faminto = 1,Clientes=1, Tipo=3)
knnPredict <- predict(knnFit, newdata = new )
print(knnFit)
print(knnPredict))
print(knnPredict)
install.packages('boot')
library(boot)
reg <- seis <- read.csv2('C:/Users/gabri/Downloads/regressao.csv', sep = ';', header = T)
reg <- seis <- read.csv2('C:/Users/gabri/Downloads/regressao.csv', sep = ';', header = T)
reg <- read.csv2('C:/Users/gabri/Downloads/regressao.csv', sep = ';', header = T)
reg <- read.csv2('C:/Users/gabri/Downloads/regressao.csv', sep = ',', header = T)
View(reg)
glm <- glm(Y ~ .,reg)
data(mm, package = 'MASS')
data(mammals, package = 'MASS')
mammals
glm <- glm(Y ~ .,reg)
reg$Y <- as.integer(reg$Y)
glm <- glm(Y ~ .,reg)
glm <- glm(Y ~ X1,reg)
glm <- glm(log(Y) ~ log(X1),reg)
treeReg <- rpart(Y ~ .,reg)
treeReg
plot(treeReg)
print(treeReg)
treeReg <- rpart(Y ~ .,reg, method = 'anova')
print(treeReg)
plot(treeReg)
plotcp(treeReg)
new <- data.frame(X1 =245 , X2 =4 , X3 = 9700, X4 = 4600, X5 = 1835)
pred <- predict(treeReg, new)
pred
plotcp(treeReg)
plot(treeReg)
print(treeReg)
knn <- ?train(Direction ~ ., data = training, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
?train(Direction ~ ., data = training, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
knn <- train(Direction ~ ., data = training, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
ctrl
?trainControl(method = "repeatedcv", repeats = 3)
?knn()
knn(Y ~ .,k=5)
knn(reg,k=5)
knn(reg,k=5)
reg[1:9,]
reg[10:20, ]
knn(reg[10:20, ], reg[1:9,],k=5)
library(class)
knn(reg[10:20, ], reg[1:9,],k=5)
reg$Y <- factor(reg$Y)
knn(reg[10:20, ], reg[1:9,], reg[10:20, ]$Y,k=5)
knnTrains <- knn(reg[10:20, ], reg[1:9,], reg[10:20, ]$Y,k=5)
new <- data.frame(X1 =245 , X2 =4 , X3 = 9700, X4 = 4600, X5 = 1835)
pred <- predict(knnTrains, new)
knnTrains
pred <- predict(knnTrains, new)
knnTrains <- knn(reg[10:20, ], new, reg[10:20, ]$Y,k=5)
knnTrains <- knn(reg[10:20, ], reg[1:9,], reg[10:20, ]$Y,k=5)
new <- data.frame(X1 =245 , X2 =4 , X3 = 9700, X4 = 4600, X5 = 1835)
install.packages('FNN')
library(FNN)
?knn.reg(reg[10:20, ], test = new, y = reg[10:20,]$Y, k = 5, algorithm = )
pred <- knn.reg(reg[10:20, ], test = new, y = reg[10:20,]$Y, k = 5, algorithm = 'eucledian')
pred <- knn.reg(reg[10:20, ], test = new, y = reg[10:20,]$Y, k = 5, algorithm = 'kd_tree')
pred <- knn.reg(reg[10:20, ], test = reg[1:9,], y = reg[10:20,]$Y, k = 5, algorithm = 'kd_tree')
reg <- read.csv2('C:/Users/gabri/Downloads/regressao.csv', sep = ',', header = T)
pred <- knn.reg(reg[10:20, ], test = reg[1:9,], y = reg[10:20,]$Y, k = 5, algorithm = 'kd_tree')
pred$pred
predict(pred, new)
predict(pred$pred, new)
install.packages('arules')
library(arules)
assoc <- read.csv2('C:/Users/gabri/Downloads/dez.csv', sep = ',', header = T)
assoc <- read.csv2('C:/Users/gabri/Downloads/dez.csv', sep = ',', header = T)
apriori(assoc)
ap <- apriori(assoc)
ap <- apriori(assoc)
ap
inspect(ap)
rules <- apriori(assoc,  appearance = list(rhs=c("Manteiga=S", "Pão=S"),
+ default="lhs"),
+ control = list(verbose=F))
rules <- apriori(assoc,  appearance = list(rhs=c("Manteiga=S", "Pão=S"), default="lhs"),control = list(verbose=F))
View(assoc)
rules <- apriori(assoc,  appearance = list(rhs=c("Manteiga=S", "Pao=S"), default="lhs"),control = list(verbose=F))
inspect(rules)
rules <- apriori(assoc,  appearance = list(rhs=c("Cafe=S"), default="lhs"),control = list(verbose=F))
inspect(rules)
rules <- apriori(assoc,  appearance = list(rhs=c("Cafe=S")),control = list(verbose=F))
inspect(rules)
rules <- apriori(assoc,  appearance = list(default = "none", rhs=c("Cafe=S"), lhs = c("Manteiga=S", "Pao=s"), ),control = list(verbose=F))
rules <- apriori(assoc,  appearance = list(default = "none", rhs=c("Cafe=S"), lhs = c("Manteiga=S", "Pao=s")),control = list(verbose=F))
View(assoc)
rules <- apriori(assoc,  appearance = list(default = "none", rhs=c("Cafe=S"), lhs = c("Manteiga=S", "Pao=S")),control = list(verbose=F))
inspect(rules)
rules
rules <- apriori(assoc,  parameter = list(supp = 0.002, conf=0.1),
appearance = list(default = "none", rhs=c("Cafe=S"), lhs = c("Manteiga=S", "Pao=S")),control = list(verbose=F))
inspect(rules)
reg <- read.csv2('C:/Users/gabri/Downloads/regressao.csv', sep = ',', header = T)
glm <- glm(Y ~ ., data = reg)
glm
cv.glm(reg, glm)
cv.glm(reg, glm)$delta
#path <- 'E:/Curso Cientista de Dados/Projeto Final/analysisFacebook/jobsAnalysis'
#path <- 'E:/jobsAnalysis'
path <- 'C:/Users/gabri/Desktop/jobsAnalysis'
setwd(path)
source(paste(path,'/ETL/utils.R', sep = '') )
dadosGD    <- fread('data/reviewGlassD.csv')
dadosClean <- cleanText(dadosGD,c('title','pros','cons'),stopWords = stopwords("en"),stemming = T)
dadosClean$recommend <- dadosGD$recommend
dadosClean <- dadosClean[dadosClean$recommend != 'NI',]
textDF <- data.frame(apply(dadosClean,1,function(x){
x <- paste(x['title'],x['pros'],x['cons'],collapse = "")
x
}),stringsAsFactors = F)
colnames(textDF) <- 'text'
textDF$recommend <- as.factor(dadosClean$recommend)
source <- VectorSource(textDF$text)
corpus <- Corpus(source)
corpus <- tm_map(corpus, stripWhitespace)
dtm <- DocumentTermMatrix(corpus)
dtm
dtm <- DocumentTermMatrix(corpus,control=list(wordLengths=c(3, 25))
)
dtm
gc(reset = T)
gc()
dtm
dtm <- removeSparseTerms(dtm, 0.999) #m4 <- findFreqTerms(m4, 5)
dtm
dtmIdf    <- weightTfIdf(dtm)
dtmIdf
rows <- sample(1:nrow(m4), size = round(0.75*nrow(m4)), replace = F)
m4 <- as.matrix(dtmIdf)
rows <- sample(1:nrow(m4), size = round(0.75*nrow(m4)), replace = F)
treino <- m4[rows,]
teste  <- m4[-rows,] #table(textDF$recommend[-rows])
library('e1071')
cl <- naiveBayes(treino, textDF$recommend[rows])
pr <- predict(cl, teste)
table(as.character(textDF$recommend[-rows]), as.character(pr))
CrossTable(pr,
textDF$recommend[-rows],
prop.chisq = FALSE,
prop.t = FALSE,
prop.r = FALSE,
dnn = c('Previsto', 'Observado'))
install.packages('gmodels')
library(gmodels)
CrossTable(pr,
textDF$recommend[-rows],
prop.chisq = FALSE,
prop.t = FALSE,
prop.r = FALSE,
dnn = c('Previsto', 'Observado'))
recall_accuracy(as.character(textDF$recommend[-rows]), as.character(pr))
library(RTextTools)
recall_accuracy(as.character(textDF$recommend[-rows]), as.character(pr))
?naiveBayes(treino, textDF$recommend[rows],laplace = 1)
cl <- naiveBayes(treino, textDF$recommend[rows],laplace = 2)
pr <- predict(cl, teste)
table(as.character(textDF$recommend[-rows]), as.character(pr))
CrossTable(pr,
textDF$recommend[-rows],
prop.chisq = FALSE,
prop.t = FALSE,
prop.r = FALSE,
dnn = c('Previsto', 'Observado'))
recall_accuracy(as.character(textDF$recommend[-rows]), as.character(pr))
cl <- naiveBayes(treino, textDF$recommend[rows],laplace = 3)
pr <- predict(cl, teste)
recall_accuracy(as.character(textDF$recommend[-rows]), as.character(pr))
cl <- naiveBayes(treino, textDF$recommend[rows],laplace = 1)
pr <- predict(cl, teste)
recall_accuracy(as.character(textDF$recommend[-rows]), as.character(pr))
rowsTrain <- rows
rowsTest  <- as.integer(setdiff(row.names(x2),rows))
row.names(textDF)
rowsTest  <- as.integer(setdiff(row.names(textDF),rows))
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = rowsTest ,virgin = F)
m4
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = rowsTest ,virgin = F)
rows <- sample(1:nrow(m4), size = round(0.75*nrow(m4)), replace = F)
rowsTrain <- rows
rowsTest  <- as.integer(setdiff(row.names(textDF),rows))
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = rowsTest ,virgin = F)
32201+64496
length(m4)
dim(textDF)
rowsTrain <- rows
rowsTest  <- as.integer(setdiff(row.names(textDF),rows))
rowsTrain
rowsTest
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = rowsTest ,virgin = F)
cont      <- create_container(m4, textDF$recommend, trainSize = 1:100, testSize = rowsTest ,virgin = F)
cont      <- create_container(m4, textDF$recommend, trainSize = 1:100, testSize = 101:200 ,virgin = F)
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = 101:200 ,virgin = F)
row.names(textDF[-rows])
rowsTrain <- row.names(textDF[rows]) #rows
row.names(textDF[rows])
row.names(textDF[-rows])
textDF[rows]
row.names(textDF[rows,])
rowsTrain <- row.names(textDF[rows,]) #rows
rowsTest  <- row.names(textDF[-rows])# as.integer(setdiff(row.names(textDF),rows))
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = rowsTest ,virgin = F)
textDF$recommend
rowsTest
rowsTrain
rows <- sample(1:nrow(m4), size = round(0.75*nrow(m4)), replace = F)
rowsTrain <- row.names(textDF[rows,]) #rows
rowsTest  <- row.names(textDF[-rows])# as.integer(setdiff(row.names(textDF),rows))
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = rowsTest ,virgin = F)
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = 1:10, virgin = F)
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = 1:100, virgin = F)
cont      <- create_container(m4, textDF$recommend, trainSize = 1:100, testSize = rowsTest, virgin = F)
cont      <- create_container(m4, textDF$recommend, trainSize = 1:100, testSize = 100:200, virgin = F)
m4[1]
m4[100]
m4[200]
m4[133]
m4[rowsTrain]
dtm <- DocumentTermMatrix(corpus,control=list(wordLengths=c(3, 25)))
dtm
m4 <- as.matrix(dtm)
dtm <- removeSparseTerms(dtm, 0.999) #m4 <- findFreqTerms(m4, 5)
m4 <- as.matrix(dtm)
dtm
rows <- sample(1:nrow(m4), size = round(0.75*nrow(m4)), replace = F)
rowsTrain <- row.names(textDF[rows,]) #rows
rowsTest  <- row.names(textDF[-rows])# as.integer(setdiff(row.names(textDF),rows))
cont      <- create_container(m4, textDF$recommend, trainSize = 1:100, testSize = 100:200, virgin = F)
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = 100:200, virgin = F)
rowsTrain <- rows
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = 100:200, virgin = F)
rowsTest  <- as.integer(setdiff(row.names(textDF),rows))
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = rowsTest, virgin = F)
rowsTrain <- rows
rowsTest  <- as.integer(setdiff(row.names(textDF),rows))
cont      <- create_container(m4, textDF$recommend, trainSize = rowsTrain, testSize = rowsTest, virgin = F)
